# %%
from gensim.models.doc2vec import Doc2Vec, TaggedDocument
import os
import tempfile
from scripts.transform import get_opcode_from

# %%
train_data_path = "/share/mal/APT"
model_path = os.path.join('.', 'trained_models')

# %%
"""
## 从bytes文件获取opcode
前提是bytes文件中只包含.text段
"""

# %%
def train(train_data_path, model_path, workers=4, vector_size=256):
    opcode_sequence_list = []
    for root, _, files in os.walk(train_data_path):
        for fname in files:
            if fname.split('.')[-1] == "asm":
                asm_path = os.path.join(root, fname)
                opcode_sequence = []
                with open(asm_path) as f:
                    for line in f:
                        opcode_sequence.append(line)
                opcode_sequence_list.append(opcode_sequence)

    documents = [TaggedDocument(doc, [i]) for i, doc in enumerate(opcode_sequence_list)]
    model = Doc2Vec(documents, workers=workers, vector_size=vector_size)
    mode.save(os.path.join(model_path, 'malware_sim%doc2vec.pth'))

# %%
train(train_data_path, model_path, workers=16)

# %%
model = Doc2Vec.load(os.path.join(model_path, 'malware_sim%doc2vec.pth'))

# %%
model.infer_vector(get_opcode_from("fc2dbfda41860b2385314c87e81f1ebb4f9ae1106b697e019841d8c3bf402570.bytes"))

# %%
