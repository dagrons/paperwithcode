# %%
"""
## 将bytes文件转化为bmp图像
"""

# %%
import numpy as np
from PIL import Image
import pefile
import angr
import math


# %%
def bytes2bmp(bytes_path, bmp_path):
    """
    针对kaggle的格式
    """
    
    blist = [] # byte list 
    with open(bytes_path) as f:
        for line in f:
            words = line.split(' ')
            words = words[1:] # ignore the address column
            for word in words:
                if word not in ["??", "??\n"]: # filter "??"
                    blist.append(int(word, 16)) # conver hex string to int
    width = int(math.sqrt(len(blist)))
    b_mat = np.asarray(blist, dtype=np.uint8)
    height = len(b_mat) // width
    b_mat = b_mat[0:width*height]
    b_mat = np.reshape(b_mat, (-1, width)) 
    img = Image.fromarray(b_mat)
    img.save(bmp_path)
    return img

# %%
"""
## 将bmp转化为png
"""


# %%
def bmp2png(bmp_path, png_path):
    bmp = Image.open(bmp_path)
    bmp_mat = np.asarray(bmp, dtype=np.uint8)
    png_mat = np.reshape(bmp_mat, (bmp_mat.shape[0], bmp_mat.shape[1], 1))
    png_mat = np.repeat(png_mat, 3, axis=2) # 在第2个维度重复3遍即可
    png = Image.fromarray(png_mat, 'RGB')
    png.save(png_path)
    return png


# %%
"""
## 将pe转化为bmp
"""


# %%
def pe2bmp(pe_path, bmp_path):
    pe = pefile.PE(pe_path)
    selected_sections = [sec for sec in pe.sections if str(sec.Name, encoding='utf-8').strip('\x00') in ['.text', '.data', '.rdata']]
    selected_bytes = []
    last_addr = selected_sections[0].VirtualAddress
    for sec in selected_sections:
        if last_addr < sec.VirtualAddress:
            selected_bytes.extend([0] * (sec.VirtualAddress - last_addr))
            last_addr = sec.VirtualAddress
        selected_bytes.extend(sec.get_data())
        last_addr += sec.SizeOfRawData
    width = int(math.sqrt(len(selected_bytes)))
    b_mat = np.asarray(selected_bytes, dtype=np.uint8)
    b_mat = b_mat[0:len(b_mat)//width*width]
    b_mat= np.reshape(b_mat, (-1, width))
    img = Image.fromarray(b_mat)
    img.save(bmp_path)
